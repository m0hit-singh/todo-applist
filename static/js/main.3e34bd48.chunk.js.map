{"version":3,"sources":["app/store/history.js","app/routes/layout/components/header.component.js","app/routes/layout/components/footer.component.js","app/routes/to-do/components/todo-list.component.js","app/routes/layout/components/home.component.js","app/routes/login/components/login.component.js","app/routes/user/components/user.component.js","app/store/actions/user.action.js","app/store/reducers/user.reducer.js","app/library/security/store/reducers/auth.reducer.js","app/library/security/store/actions/auth.action.js","app/store/reducers/index.js","app/library/components/private-route.js","app/routes/App.js","serviceWorker.js","index.js"],"names":["history","createBrowserHistory","HeaderComponent","useDispatch","className","FooterCopmonent","TODOListComponent","useState","React","title","field","initialEditValue","columns","task","priority","data","setData","style","width","margin","height","overflowY","editable","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","dataUpdate","tableData","id","onRowDelete","dataDelete","index","splice","HomeComponent","makeStyles","theme","root","image","backgroundImage","backgroundRepeat","backgroundColor","palette","type","grey","backgroundSize","backgroundPosition","paper","spacing","display","flexDirection","alignItems","avatar","form","marginTop","submit","color","loginForm","maxWidth","frgot","textAlign","UserComponent","props","dispatch","pageState","useSelector","state","list","useEffect","request","axios","get","then","res","payload","Actions","border","cellPadding","users","map","item","first_name","last_name","gender","date_of_birth","email","initialState","userReducer","action","success","user","isLoading","authReducer","reducer","combineReducers","security","securityReducer","PrivateRoute","Component","component","rest","render","localStorage","getItem","to","pathname","from","location","redux","REPLACE","enhancer","composeEnhancers","compose","applyMiddleware","thunk","store","createStore","App","path","Home","User","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3e34bd48.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nconst  history = createBrowserHistory();\r\nexport default history;","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport * as Actions from \"../../../library/security/store/actions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nfunction HeaderComponent() {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"header\">\r\n      {/* <Button>Home</Button> */}\r\n      {/* <Button\r\n        onClick={() => {\r\n          dispatch(Actions.logout());\r\n        }}\r\n      >\r\n        Logout\r\n      </Button> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HeaderComponent;\r\n","import React from \"react\";\r\n\r\nfunction FooterCopmonent() {\r\n  return (\r\n    <div className=\"footer\">\r\n      {/* <p>XYZ Co. Ltd. All Rights Reserved.</p> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FooterCopmonent;\r\n","import React, { useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\n\r\nfunction TODOListComponent() {\r\n  const { useState } = React;\r\n\r\n  const [columns, setColumns] = useState([\r\n    { title: \"Task\", field: \"task\" },\r\n    {\r\n      title: \"Priority\",\r\n      field: \"priority\",\r\n      initialEditValue: \"High\",\r\n    },\r\n  ]);\r\n\r\n  const [data, setData] = useState([\r\n    { task: \"Homework\", priority: \"High\" },\r\n    { task: \"Coffee\", priority: \"Low\" },\r\n  ]);\r\n\r\n  return (\r\n    <MaterialTable\r\n      style={{\r\n        width: \"50rem\",\r\n        margin: \"auto\",\r\n        height: \"432px\",\r\n        overflowY: \"auto\",\r\n      }}\r\n      title=\"Todo List\"\r\n      columns={columns}\r\n      data={data}\r\n      editable={{\r\n        onRowAdd: (newData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              setData([...data, newData]);\r\n\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n        onRowUpdate: (newData, oldData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataUpdate = [...data];\r\n              const index = oldData.tableData.id;\r\n              dataUpdate[index] = newData;\r\n              setData([...dataUpdate]);\r\n\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n        onRowDelete: (oldData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataDelete = [...data];\r\n              const index = oldData.tableData.id;\r\n              dataDelete.splice(index, 1);\r\n              setData([...dataDelete]);\r\n\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n      }}\r\n    />\r\n  );\r\n}\r\nexport default TODOListComponent;\r\n","import React from \"react\";\r\n\r\nimport Header from \"./header.component\";\r\nimport Footer from \"./footer.component\";\r\nimport TODOListComponent from \"../../to-do/components/todo-list.component\";\r\n\r\nfunction HomeComponent() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <TODOListComponent />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeComponent;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  CssBaseline,\r\n  TextField,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Link,\r\n  Paper,\r\n  Grid,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport * as Actions from \"../../../library/security/store/actions\";\r\n\r\nfunction LoginComponent() {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  const pageState = useSelector((state) => state.security);\r\n\r\n  const [model, setModel] = useState({});\r\n  const [success, setSuccess] = useState(pageState.success);\r\n\r\n  useEffect(() => {\r\n    setSuccess(pageState.success);\r\n  }, [pageState, setSuccess]);\r\n\r\n  function handleSubmit() {\r\n    dispatch(Actions.login(model));\r\n  }\r\n\r\n  function handleChange(event) {\r\n    event.persist();\r\n    setModel((values) => ({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n  }\r\n\r\n  return success ? (\r\n    <Redirect to=\"/home\" />\r\n  ) : (\r\n    <Grid container component=\"main\" className={classes.root}>\r\n      <CssBaseline />\r\n      <Grid item xs={false} sm={4} md={9} className={classes.image} />\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        sm={7}\r\n        md={3}\r\n        component={Paper}\r\n        elevation={6}\r\n        square\r\n        className={classes.loginForm}\r\n      >\r\n        <div className={classes.paper}>\r\n          <div className={classes.avatar}>\r\n            {/* <img src={logo} alt=\"log\" /> */}\r\n          </div>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            LOGIN\r\n          </Typography>\r\n          <div className={classes.form}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              name=\"username\"\r\n              autoComplete=\"Username\"\r\n              autoFocus\r\n              onChange={handleChange}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              onChange={handleChange}\r\n            />\r\n            {/* <FormControlLabel\r\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n              label=\"Remember me\"\r\n            /> */}\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              // color=\"primary\"\r\n              className={classes.submit}\r\n              disabled={model.password ? false : true}\r\n              onClick={() => handleSubmit()}\r\n            >\r\n              Login\r\n            </Button>\r\n            {/* <Grid container>\r\n              <Grid item xs={12} sm={12} md={12} className={classes.frgot}>\r\n                <Link href=\"#\" variant=\"body2\">\r\n                  Forgot password?\r\n                </Link>\r\n              </Grid>\r\n            </Grid> */}\r\n          </div>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: \"100vh\",\r\n  },\r\n  image: {\r\n    backgroundImage: \"url(/assets/bg.png)\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundColor:\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[50]\r\n        : theme.palette.grey[900],\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\",\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(8, 4),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n    backgroundColor: \"#0071bb\",\r\n    color: \"white\",\r\n  },\r\n  loginForm: {\r\n    maxWidth: \"51.2rem\",\r\n  },\r\n  frgot: {\r\n    textAlign: \"center\",\r\n  },\r\n}));\r\n\r\nexport default LoginComponent;\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\nimport * as Actions from '../../../store/actions';\r\n// import reducer from '../../store/reducers';\r\n\r\nfunction UserComponent(props) {\r\n\r\n  const dispatch = useDispatch();\r\n  const pageState = useSelector(state => state.list);\r\n\r\n  useEffect(() => {\r\n      dispatch(Actions.getUsers());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div>\r\n      <table border=\"1\" cellPadding=\"14\">\r\n        <thead>\r\n          <tr>\r\n            <td>First Name</td>\r\n            <td>Last Name</td>\r\n            <td>Gender</td>\r\n            <td>DOB</td>\r\n            <td>Email</td>\r\n          </tr>\r\n        </thead>\r\n        {pageState.users &&\r\n          pageState.users.map((item) => (\r\n            <tr id={item.id}>\r\n              <td>{item.first_name}</td>\r\n              <td>{item.last_name}</td>\r\n              <td>{item.gender}</td>\r\n              <td>{item.date_of_birth}</td>\r\n              <td>{item.email}</td>\r\n            </tr>\r\n          ))}\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserComponent;\r\n","import axios from 'axios';\r\n\r\nexport const GET_USERS_LIST = 'USERS: GET_USERS_LIST';\r\n\r\nexport function getUsers() {\r\n\r\n    const request = axios.get(`/api/person/`);\r\n\r\n    return dispatch =>\r\n        request\r\n            .then(res =>\r\n                dispatch({\r\n                    type: GET_USERS_LIST,\r\n                    payload: res.data\r\n                })\r\n            );\r\n}\r\n","import * as Actions from '../actions';\r\n\r\nconst initialState = {\r\n    users: [],\r\n};\r\n\r\nconst userReducer = function (state = initialState, action) {\r\n\r\n    switch (action.type) {\r\n        case Actions.GET_USERS_LIST: {\r\n            return {\r\n                ...state,\r\n                users: action.payload\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport default userReducer;\r\n\r\n","import * as Actions from '../actions';\r\n\r\nconst initialState = {\r\n    success: false,\r\n    user: {},\r\n    isLoading: false\r\n};\r\n\r\nconst authReducer = function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case Actions.LOGIN_SUCCESS: {\r\n            return {\r\n                success: true,\r\n                user: action.payload,\r\n                isLoading: false\r\n            };\r\n        }\r\n        case Actions.LOGGED_OUT: {\r\n            return initialState;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n","import AuthService from '../../auth-service.security';\r\nimport history from '../../../../store/history';\r\n\r\nexport const LOGIN_SUCCESS = 'AUTH: LOGIN_SUCCESS';\r\nexport const LOGGED_OUT = 'AUTH: LOGGED_OUT';\r\n\r\nexport function login({ username, password }) {\r\n\r\n    return (dispatch) => {\r\n        AuthService\r\n            .login(username, password)\r\n            .then(user => {\r\n                history.push('/home');\r\n                dispatch(setUser(user));\r\n            })\r\n            .catch(error => {\r\n                window.location.replace('/');\r\n            });\r\n    };\r\n}\r\n\r\n\r\nexport function setUser(user) {\r\n    return (dispatch) => {\r\n        dispatch({ type: LOGIN_SUCCESS, payload: user });\r\n    };\r\n}\r\n\r\nexport function logout() {\r\n    return dispatch => {\r\n        AuthService.logout();\r\n\r\n        window.location.replace('/')\r\n\r\n        dispatch({ type: LOGGED_OUT });\r\n    };\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport userReducer from './user.reducer';\r\nimport securityReducer from '../../library/security/store/reducers/auth.reducer'\r\n\r\nconst reducer = combineReducers({\r\n    list: userReducer,\r\n    security: securityReducer\r\n});\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nconst  PrivateRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={props => (\r\n        localStorage.getItem('access_token')\r\n            ? <Component {...props} />\r\n            : <Redirect to={{ pathname: '/', state: { from: props.location } }} />\r\n    )} />\r\n);\r\n\r\nexport default PrivateRoute;","import React from \"react\";\nimport \"../styles/App.css\";\nimport Home from \"../routes/layout/components/home.component\";\nimport LoginComponent from \"../routes/login/components/login.component\";\nimport User from \"../routes/user/components/user.component\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport * as redux from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport reducer from \"../store/reducers\";\nimport { Provider } from \"react-redux\";\nimport PrivateRoute from \"../library/components/private-route\";\nimport history from \"../store/history\";\n\nredux.__DO_NOT_USE__ActionTypes.REPLACE = \"@@redux/INIT\";\n\nconst composeEnhancers =\n  process.env.NODE_ENV !== \"production\" &&\n  typeof window === \"object\" &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n    : compose;\n\nconst enhancer = composeEnhancers(applyMiddleware(thunk));\n\nconst store = createStore(reducer, enhancer);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router history={history}>\n        <Switch>\n          {/* <Route exact path=\"/\" component={LoginComponent} /> */}\n          <Route path=\"/\" component={Home} />\n          <PrivateRoute path=\"/users\" component={User} />\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src/app/styles/index.css';\nimport App from '../src/app/routes/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}